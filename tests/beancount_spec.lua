--# selene: allow(undefined_variable, incorrect_standard_library_use)

local beancount = require("beancount")

context("Amounts", function()
  describe("without quantities", function()
    local amount = beancount.Amount:new(100, "USD")
    local rendered = tostring(amount)
    it("should provide the correct format", function()
      assert.are.equal(rendered, "100.00 USD")
    end)
  end)
  describe("with quantities", function()
    local amount = beancount.Amount:new(100, "USD", 10)
    local rendered = tostring(amount)
    it("should provide the correct format", function()
      assert.are.equal(rendered, "10 * 100.00 USD")
    end)
  end)
end)

context("Postings", function()
  describe("without commodity", function()
    local posting = beancount.Posting:new("Expenses:SomeAccount")
    local rendered = tostring(posting)
    it("should be only the account name", function()
      assert.are.equal(rendered, "Expenses:SomeAccount")
    end)
  end)
  describe("with commodity", function()
    local posting = beancount.Posting:new("Expenses:SomeAccount"):commodity(100, "USD")
    local rendered = tostring(posting)
    it("should start with the account name", function()
      assert.does.match("^Expenses:SomeAccount", rendered)
    end)
    it("should end with the commodity", function()
      assert.does.match("100.00 USD$", rendered)
    end)
  end)
  describe("with commodity including quantities", function()
    local posting = beancount.Posting:new("Expenses:SomeAccount"):commodity(100, "USD", 10)
    local rendered = tostring(posting)
    it("should start with the account name", function()
      assert.does.match("^Expenses:SomeAccount", rendered)
    end)
    it("should end with the commodity", function()
      assert.does.match("10 %* 100.00 USD$", rendered)
    end)
  end)
  describe("length", function()
    local posting0 = beancount.Posting:new("Expenses:SomeAccount"):commodity(100, "USD")
    local posting1 = beancount.Posting:new("Expenses:SomeAccount"):commodity(100, "USD", 10)
    it("should not be affected by quantities", function()
      assert.are.equal(#tostring(posting0), #tostring(posting1))
    end)
  end)
  describe("with price", function()
    local posting = beancount.Posting:new("Expenses:SomeAccount"):commodity(100, "USD"):price(1.05, "CAD")
    local rendered = tostring(posting)
    it("should start with the account name", function()
      assert.does.match("^Expenses:SomeAccount", rendered)
    end)
    it("should end with the commodity and price", function()
      assert.does.match("100.00 USD @ 1.05 CAD$", rendered)
    end)
  end)
end)

context("Transactions", function()
  describe("without postings", function()
    local transaction = beancount.Transaction:new("2025-08-07", "Test description")
    local rendered = tostring(transaction)
    it("should only contain the header", function()
      assert.are.equal(rendered, '2025-08-07 * "Test description"')
    end)
  end)
end)
